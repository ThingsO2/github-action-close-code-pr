name: Build
on:
  release:
    types: [published]

jobs:
  staging:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0
        with:
          project_id: monom-cicd-tools
          service_account_key: ${{ secrets.SA_KEY }}
          export_default_credentials: true

      - name: Docker login
        run: gcloud auth configure-docker

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: gcr.io/monom-cicd-tools/${{ github.event.repository.name }}:${{ github.event.release.tag_name }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
        # This ugly bit is necessary if you don't want your cache to grow forever
        # till it hits GitHub's limit of 5GB.
        # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Slack notification
        uses: act10ns/slack@v1
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#deployments'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Delete tag and release when it fails
        uses: dev-drprasad/delete-tag-and-release@v0.2.0
        if: failure()
        with:
          delete_release: true
          tag_name: ${{ github.event.release.tag_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Clean gcr images
        run: |
          curl -X POST -H "Authorization: Bearer $(gcloud auth print-identity-token)" https://gcr-cleaner-m3srfcef5q-ew.a.run.app/http -d '{"repos":["gcr.io/monom-cicd-tools/${{ github.event.repository.name }}"], "tag_filter_all":".*", "dry_run":false,"keep":10}'
